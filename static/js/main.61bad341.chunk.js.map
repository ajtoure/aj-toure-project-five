{"version":3,"sources":["Header.js","Blog.js","firebase.js","PastEntries.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","Blog","class","action","method","name","for","type","placeholder","required","id","cols","rows","value","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAeeA,G,6KAXP,OACI,6BACI,gCACI,iDACA,6E,GANCC,cCuDNC,E,uKApDP,OACI,yBAAKC,MAAM,WACP,0BAAMC,OAAO,GAAGC,OAAO,GAAGF,MAAM,gBAAgBG,KAAK,iBAEjD,2BAAOC,IAAI,OAAOJ,MAAM,OAAOG,KAAK,QAApC,SAGA,2BAAOE,KAAK,OAAOL,MAAM,OAAOG,KAAK,SAErC,2BAAOC,IAAI,eAAeJ,MAAM,eAAeG,KAAK,gBAApD,2CAGA,2BAAOE,KAAK,OAAOF,KAAK,eAAeG,YAAY,8CAA8CC,UAAQ,IAEzG,2BAAOH,IAAI,WAAWJ,MAAM,WAAWG,KAAK,YAA5C,2BAGA,2BAAOE,KAAK,OAAOF,KAAK,WAAWG,YAAY,0CAA0CC,UAAQ,IAEjG,2BAAOH,IAAI,WAAWJ,MAAM,WAAWG,KAAK,YAA5C,0CAGA,2BAAOE,KAAK,OAAOC,YAAY,kDAAkDC,UAAQ,IAEzF,2BAAOH,IAAI,iBAAX,oBAGA,8BAAUD,KAAK,gBAAgBK,GAAG,gBAAgBC,KAAK,KAAKC,KAAK,OAEjE,2BAAON,IAAI,SAAX,2CAGA,4BAAQD,KAAK,QAAQK,GAAG,SACpB,4BAAQG,MAAM,KACd,4BAAQA,MAAM,IAAd,eACA,4BAAQA,MAAM,IAAd,eACA,4BAAQA,MAAM,IAAd,aAGJ,4BAAQN,KAAK,UAAb,UAIA,4BAAQA,KAAK,UAAb,e,GA7CDP,a,sBCUnBc,IAASC,cAVM,CACXC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,EAAf,ECZ0Bd,YDYXc,IEIAS,E,uKATX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUvB,aCKEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.61bad341.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <div>\n                <header>\n                    <h1>my sunny day blog</h1>\n                    <p>Keep track of your sunny and rainy days!</p>\n                </header>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\n\nclass Blog extends Component {\n    render() {\n        return (\n            <div class=\"wrapper\">\n                <form action=\"\" method=\"\" class=\"blogEntryForm\" name=\"blogEntryForm\">\n\n                    <label for=\"date\" class=\"date\" name=\"date\">\n                        date:\n                    </label>\n                    <input type=\"date\" class=\"date\" name=\"date\" />\n\n                    <label for=\"oneGoodThing\" class=\"oneGoodThing\" name=\"oneGoodThing\">\n                        One good thing that happened today was:\n                    </label>\n                    <input type=\"text\" name=\"oneGoodThing\" placeholder=\"(i.e. 'I got my app to render to the page' \" required />\n\n                    <label for=\"thankFul\" class=\"thankFul\" name=\"thankFul\">\n                        Today I'm thankful for:\n                    </label>\n                    <input type=\"text\" name=\"thankFul\" placeholder=\"(i.e. 'my cat who always cheers me up')\" required />\n\n                    <label for=\"toMorrow\" class=\"toMorrow\" name=\"toMorrow\">\n                        Tomorrow, one thing I'll do better is:\n                    </label>\n                    <input type=\"text\" placeholder=\"(i.e. 'be brave enough to ask more questions!')\" required />\n\n                    <label for=\"finalThoughts\">\n                        A final thought:\n                    </label>\n                    <textarea name=\"finalThoughts\" id=\"finalThoughts\" cols=\"30\" rows=\"10\"></textarea>\n\n                    <label for=\"emoji\">\n                        Pick an emoji that represents your day!\n                    </label>\n                    <select name=\"emoji\" id=\"emoji\">\n                        <option value=\"\"></option>\n                        <option value=\"\">:butterfly:</option>\n                        <option value=\"\">:sunflower:</option>\n                        <option value=\"\">:flower:</option>\n                    </select>\n\n                    <button type=\"submit\">\n                        Submit\n                    </button>\n\n                    <button type=\"submit\">\n                        Reset\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Blog;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst config = {\n    apiKey: \"AIzaSyB04Dzt5TrUChNru_CDPh0a2_TQ_DMrFb4\",\n    authDomain: \"aj-toure-project-five.firebaseapp.com\",\n    databaseURL: \"https://aj-toure-project-five.firebaseio.com\",\n    projectId: \"aj-toure-project-five\",\n    storageBucket: \"aj-toure-project-five.appspot.com\",\n    messagingSenderId: \"655412486290\",\n    appId: \"1:655412486290:web:26c28583248600df12464b\"\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;","import React, { Component } from 'react';\nimport Firebase from './firebase';\n\nclass PastEntries extends Component {\n\n    render() {\n        return ( \n            <div>\n                <aside>\n                    <ul>\n                        <li>past entries will go here!</li>\n                    </ul> \n                </aside> \n            </div>\n        )\n    }\n}\n\nexport default PastEntries;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Blog from './Blog';\nimport firebase from './firebase';\nimport PastEntries from './PastEntries';\n\nclass App extends Component {\n\n  render(){\n    return(\n      <div> \n        <Header />\n        <Blog />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}